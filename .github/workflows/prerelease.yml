# This is a basic workflow to help you get started with Actions

name: Prerelease

# Controls when the workflow will run
# Allows you to run this workflow manually from the Actions tab
on: [workflow_dispatch]

# default environment variables
env:
  TARGET: 'win'
  ARTIFACT_FILTER: '*.exe'
  ARTIFACT_NAME: 'HstWB Imager 0.1.0 Windows.exe'
  ARTIFACT_NAME_WINDOWS: 'HstWB Imager 0.1.0 Windows.exe'
  ARTIFACT_NAME_MACOS: 'HstWB Imager 0.1.0 macOS.dmg'
  ARTIFACT_NAME_LINUX: 'HstWB Imager 0.1.0 Linux.AppImage'

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, macos-latest, ubuntu-latest]
        
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set version
        working-directory: ./src
        shell: pwsh
        run: |
          "BUILD_VERSION=0.1.{0}" -f (git rev-list --count $env:GITHUB_REF) >> $env:GITHUB_ENV
          "BUILD_VERSION_SHA={0}" -f (git log --pretty=format:'%h' -n 1 $env:GITHUB_REF) >> $env:GITHUB_ENV

      - name: Show version
        shell: pwsh
        run: |
          "BUILD_VERSION: ${{ env.BUILD_VERSION }}"
          "BUILD_VERSION_SHA: ${{ env.BUILD_VERSION_SHA }}"

      - name: Set Windows release
        shell: pwsh
        run: |
          "TARGET=win" >> $env:GITHUB_ENV
          "ARTIFACT_FILTER=*.exe" >> $env:GITHUB_ENV
          "ARTIFACT_NAME=hstwb.imager.artifact-file.win" >> $env:GITHUB_ENV
          $artifactName='HstWB Imager ${{ env.BUILD_VERSION }}-${{ env.BUILD_VERSION_SHA }} Windows.exe'
          "$artifactName" > hstwb.imager.artifact-name.win.txt
          "ARTIFACT_FILENAME=$artifactName" >> $env:GITHUB_ENV
          "HstWB Imager v${{ env.BUILD_VERSION }}-${{ env.BUILD_VERSION_SHA }}" > hstwb.imager.release-name.txt
        if: matrix.os == 'windows-latest'

      - name: Set macOS release
        shell: pwsh
        run: |
          "TARGET=osx" >> $env:GITHUB_ENV
          "ARTIFACT_FILTER=*.dmg" >> $env:GITHUB_ENV
          "ARTIFACT_NAME=hstwb.imager.artifact-file.osx" >> $env:GITHUB_ENV
          $artifactName='HstWB Imager ${{ env.BUILD_VERSION }}-${{ env.BUILD_VERSION_SHA }} macOS.dmg'
          "$artifactName" > hstwb.imager.artifact-name.osx.txt
          "ARTIFACT_FILENAME=$artifactName" >> $env:GITHUB_ENV
        if: matrix.os == 'macos-latest'

      - name: Set Linux release
        shell: pwsh
        run: |
          "TARGET=linux" >> $env:GITHUB_ENV
          "ARTIFACT_FILTER=*.AppImage" >> $env:GITHUB_ENV
          "ARTIFACT_NAME=hstwb.imager.artifact-file.linux" >> $env:GITHUB_ENV
          $artifactName='HstWB Imager ${{ env.BUILD_VERSION }}-${{ env.BUILD_VERSION_SHA }} Linux.AppImage'
          "$artifactName" > hstwb.imager.artifact-name.linux.txt
          "ARTIFACT_FILENAME=$artifactName" >> $env:GITHUB_ENV
        if: matrix.os == 'ubuntu-latest'

      - name: Update Electron manifest version
        shell: pwsh
        working-directory: ./src
        run: |
          "[System.IO.File]::WriteAllText('.\HstWbInstaller.Imager.GuiApp\electron.manifest.json', ([System.IO.File]::ReadAllText('.\HstWbInstaller.Imager.GuiApp\electron.manifest.json') -replace '0.1.0', '${{ env.BUILD_VERSION }}'))"

      - name: Update package json version
        shell: pwsh
        working-directory: ./src
        run: |
          "[System.IO.File]::WriteAllText('.\HstWbInstaller.Imager.GuiApp\ClientApp\package.json', ([System.IO.File]::ReadAllText('.\HstWbInstaller.Imager.GuiApp\ClientApp\package.json') -replace '0.1.0', '${{ env.BUILD_VERSION }}'))"

      - name: Update env
        shell: pwsh
        working-directory: ./src
        run: |
          "[System.IO.File]::WriteAllText('.\HstWbInstaller.Imager.GuiApp\ClientApp\.env', ([System.IO.File]::ReadAllText('.\HstWbInstaller.Imager.GuiApp\ClientApp\.env') -replace '0.1.0', '${{ env.BUILD_VERSION }}-${{ env.BUILD_VERSION_SHA }}'))"

      - name: Setup .NET Core 5.0
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 5.0.x

      - name: Restore tool
        working-directory: ./src
        shell: pwsh
        run: dotnet tool restore

      - name: Electronize build
        working-directory: ./src
        shell: pwsh
        run: |
          cd HstWbInstaller.Imager.GuiApp
          dotnet electronize build /target ${{ env.TARGET }}

      - name: Set artifact path
        shell: pwsh
        run: |
          $artifactFile=(gci './src/HstWbInstaller.Imager.GuiApp/bin/Desktop' -Filter '${{ env.ARTIFACT_FILTER }}' | Select-Object -First 1).FullName
          Rename-Item $artifactFile -NewName '${{ env.ARTIFACT_FILENAME }}'
          "ARTIFACT_PATH={0}" -f (Join-Path (Split-Path $artifactFile -Parent) -ChildPath '${{ env.ARTIFACT_FILENAME }})' >> $env:GITHUB_ENV

      - name: Upload artifact file
        uses: actions/upload-artifact@v2
        with:
          name: hstwb.imager.artifact-file.${{ env.TARGET }}
          path: ${{ env.ARTIFACT_PATH }}

      - name: Upload artifact name
        uses: actions/upload-artifact@v2
        with:
          name: hstwb.imager.artifact-name.${{ env.TARGET }}
          path: hstwb.imager.artifact-name.${{ env.TARGET }}.txt

      - name: Upload release name
        uses: actions/upload-artifact@v2
        with:
          name: hstwb.imager.release-name
          path: hstwb.imager.release-name.txt
        if: matrix.os == 'windows-latest'

  publish:
    needs: build
    runs-on: windows-latest
    steps:
      - name: Download Windows artifact file
        uses: actions/download-artifact@v2
        with:
          name: hstwb.imager.artifact-file.win

      - name: Download Windows artifact name
        uses: actions/download-artifact@v2
        with:
          name: hstwb.imager.artifact-name.win

      - name: Download macOS artifact file
        uses: actions/download-artifact@v2
        with:
          name: hstwb.imager.artifact-file.osx

      - name: Download macOS artifact name
        uses: actions/download-artifact@v2
        with:
          name: hstwb.imager.artifact-name.osx

      - name: Download Linux artifact file
        uses: actions/download-artifact@v2
        with:
          name: hstwb.imager.artifact-file.linux

      - name: Download Linux artifact name
        uses: actions/download-artifact@v2
        with:
          name: hstwb.imager.artifact-name.linux

      - name: Download release name
        uses: actions/download-artifact@v2
        with:
          name: hstwb.imager.release-name
  
      - name: Set release and artifact names 
        shell: pwsh
        run: |
          "RELEASE_NAME={0}" -f (gc hstwb.imager.release-name.txt) >> $env:GITHUB_ENV
          "ARTIFACT_NAME_WIN={0}" -f (gc hstwb.imager.artifact-name.win.txt) >> $env:GITHUB_ENV
          "ARTIFACT_NAME_OSX={0}" -f (gc hstwb.imager.artifact-name.osx.txt) >> $env:GITHUB_ENV
          "ARTIFACT_NAME_LINUX={0}" -f (gc hstwb.imager.artifact-name.linux.txt) >> $env:GITHUB_ENV

      - name: Create release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: true
          prerelease: true
          release_name: ${{ env.RELEASE_NAME }}
          tag_name: ${{ github.ref }}
          body: Prerelease of ${{ env.RELEASE_NAME }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Upload Windows artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ARTIFACT_NAME_WIN }}
          asset_name: ${{ env.ARTIFACT_NAME_WIN }}
          asset_content_type: 'application/octet-stream'

      - name: Upload macOS artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ARTIFACT_NAME_OSX }}
          asset_name: ${{ env.ARTIFACT_NAME_OSX }}
          asset_content_type: 'application/octet-stream'

      - name: Upload Linux artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ env.ARTIFACT_NAME_LINUX }}
          asset_name: ${{ env.ARTIFACT_NAME_LINUX }}
          asset_content_type: 'application/octet-stream'